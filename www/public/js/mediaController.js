/** * mediaController. * * >>Description<< * * @author Norbert * @date 03.03.14 - 14:51 * @copyright  */var mediaController = function () {};// Default String for unknown Song datamediaController.unknownData = "Unknown";//Stream ID for ajax call to check if Song is still validmediaController.playCounter = 0;//Song Versions on different Video PortalsmediaController.versionList = [];//Song Version ManagmentmediaController.startVersionIndex = -1;mediaController.versionListSong = null;mediaController.currentStreamURL = "";mediaController.currentvideoURL = "";//Count tries to load another Song VersionmediaController.retrySongCounter = 0;//Seek Time after Version Change //TODOmediaController.seekTime = 0;mediaController.seekTimeDuration = 0;//Current Link for sharingmediaController.shareLinkURL = "";//Show Choose Version hint on first startupmediaController.showChooseVersionHint = true;/** * Init the Media Controller */mediaController.init = function () {    $("#popupShareLink").popup({        afteropen: function (event, ui) {            $('#popupShareLink input').focus().select();        }    });}//Buy song functionalitymediaController.buySong = function () {    var song = playbackController.getPlayingSong();    if (song) {        var keywords = mediaController.getSongArtist(song) + " - " + song.name;        var language = window.navigator.userLanguage || window.navigator.language;        if (language == "de" || language == "de-at" || language == "de-li") {            var buyingWindow = window.open("http://www.amazon.de/s/?_encoding=UTF8&ajr=0&camp=1638&creative=19454&field-keywords=" + keywords + "&linkCode=ur2&rh=n%3A77195031%2Ck%3A" + keywords + "&site-redirect=de&tag=iggels-21&url=search-alias%3Ddigital-music", "Amazon", "");        }        else {            buyingWindow = window.open("http://www.amazon.com/mn/search/?_encoding=UTF8&camp=1789&creative=390957&field-keywords=" + keywords + "&linkCode=ur2&linkId=MYPSR6WWIWMTB2LT&tag=songbasefm-20&url=search-alias%3Daps&linkId=D6BN5D5GAFQZOEN3", "Amazon", "");        }        buyingWindow.focus();    }}//Download Windows AppmediaController.downloadWindowsApp = function () {    var appWindow = window.open("/download/SongBase.fm.exe", "Download Songbase.fm - App", "");    appWindow.focus();    $('#popupDownloadApp').popup('close');}//Called after Song endedmediaController.mediaEnded = function () {    mediaController.sendRating("2");    parent.postMessage('title:' + $scope.appTitle, 'http://www.songbase.fm');    document.title = $scope.appTitle;    videoController.setLoopButton(true);    uiController.updateUI();    if (!playbackController.isLoading)        playbackController.playNextSong();}//Load Image of song and show itmediaController.loadPreviewSafeApplyTimer = null;mediaController.loadPreview = function (song) {    // console.dir("loadpreview ajax!!!!");    var artistString = mediaController.getSongArtist(song);    var titleString = song.name;    $.ajax({        timeout: 1000,        url: "http://ws.audioscrobbler.com/2.0/?method=track.getInfo&api_key=019c7bcfc5d37775d1e7f651d4c08e6f&artist=" + encodeURIComponent(artistString) + "&track=" + encodeURIComponent(titleString) + "&format=json",        success: function (data) {            if (data) {                if (data.track) {                    if (data.track.album) {                        song.image = data.track.album.image;                        if (mediaController.loadPreviewSafeApplyTimer) {                            clearTimeout(mediaController.loadPreviewSafeApplyTimer)                            mediaController.loadPreviewSafeApplyTimer = null;                        }                        mediaController.loadPreviewSafeApplyTimer = setTimeout(function () {                            mediaController.loadPreviewSafeApplyTimer = null;                            $scope.safeApply();                        }, 500)                    }                }            }        }    })}//Rate song by clickingmediaController.clickRateSong = function (event, songversion) {    // console.dir("mediaController.clickRateSong!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");    // console.dir(e);    var offset = $(event.target).offset();    //var    var mx = event.clientX - offset.left;    if (mx < 25) {        if (songversion.rated == 1) {            songversion.rated = 0;            mediaController.sendURLRating(songversion.url, -5);        }        else {            songversion.rated = 1;            mediaController.sendURLRating(songversion.url, 5);        }    }    else {        if (songversion.rated == -1) {            songversion.rated = 0;            mediaController.sendURLRating(songversion.url, 5);        }        else {            songversion.rated = -1;            mediaController.sendURLRating(songversion.url, -5);        }    }}//Send rating for URLmediaController.sendURLRating = function (url, rating) {    var rate = function (song, VideoURL) {        if (mediaController.currentvideoURL != "" && song) {            var artistString = encodeURIComponent(mediaController.getSongArtist(song));            var titleString = encodeURIComponent(song.name);            $.ajax({                timeout: 20000,                url: preferences.serverURL + "?ratingURL=" + VideoURL + "&rating=" + rating + "&artist=" + artistString + "&title=" + titleString + "&auth=" + authController.ip_token,                success: function (data) {                    authController.ensureAuthenticated(data, function () {                        mediaController.sendRating(rating);                    })                }            })        }    }    if (authController.ip_token != "auth" && authController.ip_token != "") {        var VideoURL = escape(url);        var song = playbackController.getPlayingSong();        setTimeout(function () {            rate(song, VideoURL)        }, 4000);    }}//Send rating for current playing song versionmediaController.sendRating = function (rating) {    var rate = function (song, VideoURL) {        if (mediaController.currentvideoURL != "" && song) {            var artistString = encodeURIComponent(mediaController.getSongArtist(song));            var titleString = encodeURIComponent(song.name);            $.ajax({                timeout: 20000,                url: preferences.serverURL + "?ratingURL=" + VideoURL + "&rating=" + rating + "&artist=" + artistString + "&title=" + titleString + "&auth=" + authController.ip_token,                success: function (data) {                    authController.ensureAuthenticated(data, function () {                        mediaController.sendRating(rating);                    })                }            })        }    }    if (authController.ip_token != "auth" && authController.ip_token != "") {        var VideoURL = escape(mediaController.currentvideoURL);        var song = playbackController.getPlayingSong();        setTimeout(function () {            rate(song, VideoURL)        }, 4000);    }}//Get rated image for song versionmediaController.getRateImage = function (songversion) {    if (!songversion.rated)        songversion.rated = 0;    if (songversion.rated == 0) {        return "public/img/ratebutton.png";    } else if (songversion.rated == 1) {        return "public/img/likedbutton.png";    } else {        return "public/img/dislikedbutton.png";    }}// Get DUration of Song VersionmediaController.getFormatedVersionDuration = function (songversion) {    if (!songversion.duration || songversion.duration == undefined)        return"";    var duration = parseInt(songversion.duration);    var date = new Date();    date.setMinutes(0, duration, 0);    var minutes = date.getMinutes().toString();    if (minutes.length < 2) {        minutes = "0" + minutes;    }    var seconds = date.getSeconds().toString();    if (seconds.length < 2) {        seconds = "0" + seconds;    }    return minutes + ":" + seconds;}//Gt logo of video site of current versionmediaController.getSiteLogo = function () {    if (mediaController.currentvideoURL.toLowerCase().search(".dailymotion.com") > -1 || mediaController.currentvideoURL.toLowerCase().search("/dailymotion.com") > -1) {        return "dailymotion.png"    } else if (mediaController.currentvideoURL.toLowerCase().search(".youtube.") > -1 || mediaController.currentvideoURL.toLowerCase().search("/youtube.") > -1) {        return "youtube.png"    } else if (mediaController.currentvideoURL.toLowerCase().search(".muzu.tv") > -1 || mediaController.currentvideoURL.toLowerCase().search("/muzu.tv") > -1) {        return "muzu.png"    } else if (mediaController.currentvideoURL.toLowerCase().search(".vimeo.") > -1 || mediaController.currentvideoURL.toLowerCase().search("/vimeo.") > -1) {        return "vimeo.png"    } else if (mediaController.currentvideoURL.toLowerCase().search(".photobucket.") > -1 || mediaController.currentvideoURL.toLowerCase().search("/photobucket.") > -1) {        return "photobucket.png"    } else if (mediaController.currentvideoURL.toLowerCase().search(".metacafe.") > -1 || mediaController.currentvideoURL.toLowerCase().search("/metacafe.") > -1) {        return "metacafe.png"    } else if (mediaController.currentvideoURL.toLowerCase().search(".veoh.") > -1 || mediaController.currentvideoURL.toLowerCase().search("/veoh.") > -1) {        return "veoh.png"    } else if (mediaController.currentvideoURL.toLowerCase().search(".blip.") > -1 || mediaController.currentvideoURL.toLowerCase().search("/blip.") > -1) {        return "blip.png"    } else if (mediaController.currentvideoURL.toLowerCase().search(".myvideo.") > -1 || mediaController.currentvideoURL.toLowerCase().search("/myvideo.") > -1) {        return "myvideo.png"    } else if (mediaController.currentvideoURL.toLowerCase().search(".clipfish.") > -1 || mediaController.currentvideoURL.toLowerCase().search("/clipfish.") > -1) {        return "clipfish.png"    } else if (mediaController.currentvideoURL.toLowerCase().search(".facebook.") > -1 || mediaController.currentvideoURL.toLowerCase().search("/facebook.") > -1) {        return "facebook.png"    } else if (mediaController.currentvideoURL.toLowerCase().search(".youku.") > -1 || mediaController.currentvideoURL.toLowerCase().search("/youku.") > -1) {        return "youku.png"    } else if (mediaController.currentvideoURL.toLowerCase().search(".rutube.") > -1 || mediaController.currentvideoURL.toLowerCase().search("/rutube.") > -1) {        return "rutube.png"    }    return "empty.png"}//Ger site logo of urlmediaController.getSiteLogoFromUrl = function (url) {    if (url.toLowerCase().search(".dailymotion.com") > -1 || url.toLowerCase().search("/dailymotion.com") > -1) {        return "dailymotion.png"    } else if (url.toLowerCase().search(".youtube.") > -1 || url.toLowerCase().search("/youtube.") > -1) {        return "youtube.png"    } else if (url.toLowerCase().search(".muzu.tv") > -1 || url.toLowerCase().search("/muzu.tv") > -1) {        return "muzu.png"    } else if (url.toLowerCase().search(".vimeo.") > -1 || url.toLowerCase().search("/vimeo.") > -1) {        return "vimeo.png"    } else if (url.toLowerCase().search(".photobucket.") > -1 || url.toLowerCase().search("/photobucket.") > -1) {        return "photobucket.png"    } else if (url.toLowerCase().search(".metacafe.") > -1 || url.toLowerCase().search("/metacafe.") > -1) {        return "metacafe.png"    } else if (url.toLowerCase().search(".veoh.") > -1 || url.toLowerCase().search("/veoh.") > -1) {        return "veoh.png"    } else if (url.toLowerCase().search(".blip.") > -1 || url.toLowerCase().search("/blip.") > -1) {        return "blip.png"    } else if (url.toLowerCase().search(".myvideo.") > -1 || url.toLowerCase().search("/myvideo.") > -1) {        return "myvideo.png"    } else if (url.toLowerCase().search(".clipfish.") > -1 || url.toLowerCase().search("/clipfish.") > -1) {        return "clipfish.png"    } else if (url.toLowerCase().search(".facebook.") > -1 || url.toLowerCase().search("/facebook.") > -1) {        return "facebook.png"    } else if (url.toLowerCase().search(".youku.") > -1 || url.toLowerCase().search("/youku.") > -1) {        return "youku.png"    } else if (url.toLowerCase().search(".rutube.") > -1 || url.toLowerCase().search("/rutube.") > -1) {        return "rutube.png"    }    return "empty.png"}//Get name of site and add prefixmediaController.getSiteName = function (url, prefix) {    if (url.toLowerCase().search(".dailymotion.com") > -1 || url.toLowerCase().search("/dailymotion.com") > -1) {        return prefix + "Dailymotion";    } else if (url.toLowerCase().search(".youtube.") > -1 || url.toLowerCase().search("/youtube.") > -1) {        return prefix + "Youtube";    } else if (url.toLowerCase().search(".muzu.tv") > -1 || url.toLowerCase().search("/muzu.tv") > -1) {        return prefix + "Muzu";    } else if (url.toLowerCase().search(".vimeo.") > -1 || url.toLowerCase().search("/vimeo.") > -1) {        return prefix + "Vimeo";    } else if (url.toLowerCase().search(".photobucket.") > -1 || url.toLowerCase().search("/photobucket.") > -1) {        return prefix + "Photobucket";    } else if (url.toLowerCase().search(".metacafe.") > -1 || url.toLowerCase().search("/metacafe.") > -1) {        return prefix + "Metacafe";    } else if (url.toLowerCase().search(".veoh.") > -1 || url.toLowerCase().search("/veoh.") > -1) {        return prefix + "Veoh";    } else if (url.toLowerCase().search(".blip.") > -1 || url.toLowerCase().search("/blip.") > -1) {        return prefix + "Blip";    } else if (url.toLowerCase().search(".myvideo.") > -1 || url.toLowerCase().search("/myvideo.") > -1) {        return prefix + "Myvideo";    } else if (url.toLowerCase().search(".clipfish.") > -1 || url.toLowerCase().search("/clipfish.") > -1) {        return prefix + "Clipfish";    } else if (url.toLowerCase().search(".facebook.") > -1 || url.toLowerCase().search("/facebook.") > -1) {        return prefix + "Facebook";    } else if (url.toLowerCase().search(".youku.") > -1 || url.toLowerCase().search("/youku.") > -1) {        return prefix + "Youku";    } else if (url.toLowerCase().search(".rutube.") > -1 || url.toLowerCase().search("/rutube.") > -1) {        return prefix + "Rutube";    }    return ""}//Play songmediaController.playSong = function (streamURL, videoURL, duration) {    mediaController.currentStreamURL = "";    mediaController.currentvideoURL = "";    videoController.loadSongInSuitablePlayer(streamURL, videoURL);    mediaController.currentStreamURL = streamURL;    mediaController.currentvideoURL = videoURL;    videoController.playSong();    //Add Playing Song to Versions list (to be displayed before actual list is loaded after clicking verssion symbol)    var song = playbackController.getPlayingSong();    if (mediaController.getElementTitle(mediaController.versionListSong) != mediaController.getElementTitle(song)) {        if (duration == 0 || duration == undefined)            duration = undefined;        else            duration = duration / 1000;        mediaController.versionList = [            {id: playlistController.getNewID(), title: mediaController.getSongDisplayName(song), duration: duration, url: videoURL}        ];    }    $scope.safeApply();    $("#searchviewVersions").listview('refresh');    $("#popupVideoSettings").popup("reposition", {positionTo: '#chooseversionbutton'})    //Set Site logo on Settings icon    var siteImage = "public/img/sites/small/" + mediaController.getSiteLogo();    $(".videoControlElements-button-choose-version").css('background-image', 'url(' + siteImage + ')');    $(".videoControlElements-button-choose-version button").css('background-position', '-1px -1px');    //On mobile phones show Popup to start song (playback is not possible via js on mobile device, only via click)    videoController.videoWasStarted = false;    if ($scope.isMobile) {        setTimeout(function () {            if (videoController.videoWasStarted == false) {                $.mobile.loading("hide");                $("#popupPlayMobile").popup("open"                    , {transition: 'pop',                        popupafteropen: function () {                            $.mobile.loading("hide");                        }}                )            }        }, 500)    }    //In case of first play show hint about how to choose version    if (mediaController.showChooseVersionHint) {        mediaController.showChooseVersionHint = false;        if (!accountController.loggedIn && (!window.localStorage || window.localStorage.showChooseVersionHint != "false")) {            if (window.localStorage)                window.localStorage.showChooseVersionHint = "false";            if ($(window).width() > 800) {                setTimeout(function () {                    $('#popupChooseVersionHint').popup('open', {positionTo: '#chooseversionbutton'});                    setTimeout(function () {                            $('#popupChooseVersionHint').popup('close');                        }, 5000                    )                }, 3000)            }        }    }    mediaController.hideLoadingPopup();}mediaController.playingSongError = function () {    console.log("#### ERROR mediaController.playingSongError " + mediaController.currentvideoURL)    if (mediaController.currentvideoURL != "") {        if (mediaController.retrySongCounter < 5) {            //Playing Video is Embedded Video            if (videoController.isEmbedVideo(mediaController.currentvideoURL)) {                mediaController.sendRating("-1");                mediaController.playNextVersion();            }            else {                //Song itself was already reloaded, try next Version now                if (mediaController.retrySongCounter > 0) {                    mediaController.sendRating("-1");                    mediaController.playNextVersion();                }                else {                    mediaController.playStream(mediaController.getSongArtist(playbackController.playingSong), playbackController.playingSong.name, 0, 0);                }            }            mediaController.retrySongCounter + 1;        }    }}mediaController.shareMediaEnabled = function () {    var enabled = false;    var song = playbackController.getPlayingSong();    if (song && song.name != "") {        enabled = true;    }    if (!enabled) {        for (var i = 0; i < playlistController.playlists.length; i++) {            if (!playlistController.playlists[i].isCurrentQueue && !playlistController.playlists[i].isSimilarSongs) {                enabled = true;                break;            }            else if (playlistController.playlists[i].isCurrentQueue) {                if (playlistController.playlists[i].tracks.length > 0) {                    enabled = true;                    break;                }            }        }    }    if (enabled) {        return true;    }    else {        return false;    }}mediaController.shareMediaStyle = function () {    if (mediaController.shareMediaEnabled()) {        return "opacity:1;";    }    else {        return "opacity:0.5;";    }}mediaController.shareMedia = function () {    var enabled = false;    var song = playbackController.getPlayingSong();    if (song && song.name != "") {        $('#shareCurrentSongButton').show();        enabled = true;    }    else {        $('#shareCurrentSongButton').hide();    }    var playlistsfound = false;    var playqueuefound = false;    for (var i = 0; i < playlistController.playlists.length; i++) {        if (!playlistController.playlists[i].isCurrentQueue && !playlistController.playlists[i].isSimilarSongs) {            playlistsfound = true;        }        else if (playlistController.playlists[i].isCurrentQueue) {            if (playlistController.playlists[i].tracks.length > 0) {                playqueuefound = true;            }        }    }    if (playlistsfound) {        $('#sharePlaylistButton').show();        enabled = true;    }    else {        $('#sharePlaylistButton').hide();    }    if (playqueuefound) {        $('#SharePlayQueueButton').show();        enabled = true;    }    else {        $('#SharePlayQueueButton').hide();    }    if (enabled) {        $scope.safeApply();        $('#popupShareMenu').popup('open', {positionTo: '#sharebutton'});    }}mediaController.loadGenre = function (genre) {    exploreController.searchGenreSongs(genre.replace("'", ""), false);    $('#popupListen').popup('close');}mediaController.shareCurrentSong = function () {    var song = playbackController.getPlayingSong();    if (song && song.name != "") {        var artistString = encodeURIComponent(mediaController.getSongArtist(song));        var titleString = encodeURIComponent(song.name);        mediaController.shareLinkURL = "http://www.songbase.fm/?artist=" + artistString + "&title=" + titleString        $scope.safeApply();        setTimeout(function () {            $("#popupShareLink").popup('open', {transition: 'pop'});        }, 200);    }    $('#popupShareMenu').popup('close');}mediaController.sharePlayQueue = function () {    var playlist = playlistController.currentQueue;    var playlistdata = JSON.stringify(playlist.tracks)    var savedata = escape(playlistdata);    $.mobile.loading("show");    $.ajax({        type: "POST",        data: {shareplaylist: escape(playlist.name), gid: playlist.gid, data: savedata, auth: authController.ip_token},        timeout: 30000,        url: preferences.serverURL, // "?storage=" +savetoken+"&n="+nonce+"&type="+savetype+"&name="+savename+"&data="+savedata,        success: function (data) {            if (authController.ensureAuthenticated(data, function () {                mediaController.shareSelectedPlaylist(playlist)            })) {                if (data.hash && data.hash != "") {                    mediaController.shareLinkURL = "http://www.songbase.fm/?playlistid=" + data.hash                    $scope.safeApply();                    setTimeout(function () {                        $("#popupShareLink").popup('open', {transition: 'pop'});                    }, 200);                    $('#popupShareMenu').popup('close');                }            }        },        complete: function () {            $.mobile.loading("hide");        }    })}mediaController.sharePlaylist = function () {    $scope.safeApply();    setTimeout(function () {        optionsMenu.openSharePlaylistOptions($('#sharebutton'));    }, 200);    $('#popupShareMenu').popup('close');}mediaController.shareSelectedPlaylist = function (playlist) {    var playlistdata = JSON.stringify(playlist.tracks)    var savedata = escape(playlistdata);    $.mobile.loading("show");    $.ajax({        type: "POST",        data: {shareplaylist: escape(playlist.name), gid: playlist.gid, data: savedata, auth: authController.ip_token},        timeout: 30000,        url: preferences.serverURL, // "?storage=" +savetoken+"&n="+nonce+"&type="+savetype+"&name="+savename+"&data="+savedata,        success: function (data) {            if (authController.ensureAuthenticated(data, function () {                mediaController.shareSelectedPlaylist(playlist)            })) {                if (data.hash && data.hash != "") {                    mediaController.shareLinkURL = "http://www.songbase.fm/?playlistid=" + data.hash                    $scope.safeApply();                    setTimeout(function () {                        $("#popupShareLink").popup('open', {transition: 'pop'});                    }, 200);                    $('#popupShareMenu').popup('close');                }            }        },        complete: function () {            $.mobile.loading("hide");        }    })}/** * * @param artist * @param title * @param callback * @param checkVersions  function to check if the new versions are ok */mediaController.loadVersions = function (song, callback, checkVersionsCallback, reloadDelay) {    var loadVersions = function (counter, song, callback, checkVersionsCallback, reloadDelay) {        if (!callback)            return;        if (!song || (mediaController.getSongDisplayName(playbackController.getPlayingSong()) == mediaController.getSongDisplayName(song))) {            var artistString = encodeURIComponent(mediaController.getSongArtist(song));            var titleString = encodeURIComponent(song.name);            $.ajax({                timeout: 10000,                url: preferences.serverURL + "?getversions=8&artist=" + artistString + "&title=" + titleString + "&auth=" + authController.ip_token,                success: function (data) {                    if (authController.ensureAuthenticated(data, function () {                        loadVersions(counter, song, callback, checkVersionsCallback, reloadDelay);                    })) {                        var dataok = false;                        if (data.track) {                            if (data.track.length > 0) {                                if (mediaController.getSongDisplayName(playbackController.getPlayingSong()) == mediaController.getSongDisplayName(song)) {                                    for (var i = 0; i < data.track.length; i++) {                                        try {                                            data.track[i].title = decodeURIComponent(data.track[i].title);                                        }                                        catch (e) {                                            data.track[i].title = unescape(data.track[i].title);                                        }                                        try {                                            data.track[i].url = decodeURIComponent(data.track[i].url);                                        }                                        catch (e) {                                            data.track[i].url = unescape(data.track[i].url);                                        }                                        data.track[i].rated = 0;                                    }                                    if (!checkVersionsCallback || checkVersionsCallback(data.track)) {                                        callback(song, data.track);                                        dataok = true;                                    }                                } else                                    dataok = true;                            }                        }                        if (dataok == false) {                            if (counter < 20) {                                if (mediaController.getSongDisplayName(playbackController.getPlayingSong()) == mediaController.getSongDisplayName(song)) {                                    setTimeout(function () {                                        loadVersions(counter + 1, song, callback, checkVersionsCallback, reloadDelay);                                    }, reloadDelay);                                }                            } else                                callback(song, null);                        }                    }                },                error: function (xhr, ajaxOptions, thrownError) {                    if (counter < 20) {                        if (playbackController.getPlayingSong() == song) {                            setTimeout(function () {                                loadVersions(counter + 2, song, callback, checkVersionsCallback, reloadDelay);                            }, reloadDelay);                        }                    } else                        callback(song, null);                }            })        }    }    loadVersions(0, song, callback, checkVersionsCallback, reloadDelay);}/** * Shows verions of song after loading them * @param song * @param callback if not null called (only) after version are successfully loaded */mediaController.getVersions = function (song, dontShowPopup, callback) {    if (authController.ip_token != "auth" && authController.ip_token != "") {        var currentsong = playbackController.getPlayingSong();        if (mediaController.currentStreamURL != "") {            if (mediaController.versionListSong != currentsong) {                var oldVersionList = mediaController.versionList;                $scope.safeApply();                $('#reloadVersionButton').css("height", "0");                $("#searchviewVersions").listview('refresh');                if (!dontShowPopup)                    $('#popupVideoSettings').popup('open', {positionTo: '#chooseversionbutton'});                $('#loadversionimg').css("opacity", "1");                mediaController.loadVersions(song,                    //callback for new Versions                    function (songLoaded, versions) {                        if (mediaController.getSongDisplayName(playbackController.getPlayingSong()) == mediaController.getSongDisplayName(songLoaded)) {                            if (!versions)                                versions = [];                            //Check if actual version is still in the list, if not add it                            var currentVersion = null;                            if (!playbackController.isLoading) {                                for (var i = 0; i < oldVersionList.length; i++) {                                    if (oldVersionList[i].url == mediaController.currentvideoURL) {                                        currentVersion = jQuery.extend(true, {}, oldVersionList[i]);                                    }                                }                            }                            mediaController.versionList = versions;                            if (currentVersion != null) {                                var found = false;                                for (var i = 0; i < mediaController.versionList.length; i++) {                                    if (mediaController.versionList[i].url == currentVersion.url) {                                        found = true;                                        break;                                    }                                }                                if (!found)                                    mediaController.versionList.unshift(currentVersion);                            }                            mediaController.versionListSong = song;                            mediaController.startVersionIndex = -1;                            if (callback)                                callback(versions);                            $('#reloadVersionButton').css("height", "51px").show();                            $scope.safeApply();                            $('#loadversionimg').css("opacity", "0");                            $("#searchviewVersions").listview('refresh');                            //$("#popupVideoSettings-popup").css("margin-left", "");                            $('#popupVideoSettings').popup("reposition", {positionTo: '#chooseversionbutton'});                            $("#popupVideoSettings-popup").css("margin-left", "1px");                        }                    }, null, 200);            }            else {                $("#searchviewVersions").listview('refresh');                $('#popupVideoSettings').popup('open', {positionTo: '#chooseversionbutton'});                $scope.safeApply();                $('#popupVideoSettings').popup("reposition", {positionTo: '#chooseversionbutton'});            }        }    }}//Reload Versions of song and display themmediaController.reloadVersions = function () {    $('#loadversionimg').css("opacity", "1");    $('#reloadVersionButton').css("height", "0");    var song = playbackController.getPlayingSong();    var artistString = encodeURIComponent(mediaController.getSongArtist(song));    var titleString = encodeURIComponent(song.name);    var duration = 200000;    var reloadVersionsFromServer = function () {        $.ajax({            timeout: 10000,            url: preferences.serverURL + "?reloadversions=" + artistString + "&title=" + titleString + "&duration=" + duration + "&auth=" + authController.ip_token,            complete: function () {                setTimeout(function () {                    mediaController.getReloadedVersions(song)                }, 2000);            }        })    }    $.ajax({        timeout: 5000,        url: "http://ws.audioscrobbler.com/2.0/?method=track.getInfo&api_key=019c7bcfc5d37775d1e7f651d4c08e6f&artist=" + artistString + "&track=" + titleString + "&format=json",        success: function (data) {            if (data.track && data.track.duration)                duration = data.track.duration;        },        complete: function () {            if (authController.ip_token != "auth" && authController.ip_token != "") {                //Load versions                reloadVersionsFromServer();            } else                $('#loadversionimg').css("opacity", "0");        }    })}//Reload VersionsmediaController.getReloadedVersions = function (song) {    if (authController.ip_token != "auth" && authController.ip_token != "") {        if (mediaController.currentStreamURL != "") {            var oldVersionList = mediaController.versionList;            $scope.safeApply();            $("#searchviewVersions").listview('refresh');            $('#loadversionimg').css("opacity", "1");            mediaController.loadVersions(song,                //callback for new Versions                function (songLoaded, versions) {                    if (mediaController.getSongDisplayName(playbackController.getPlayingSong()) == mediaController.getSongDisplayName(songLoaded)) {                        if (versions) {                            mediaController.versionListSong = song;                            //Check if actual version is still in the list, if not add it                            var currentVersion = null;                            if (!playbackController.isLoading) {                                for (var i = 0; i < oldVersionList.length; i++) {                                    if (oldVersionList[i].url == mediaController.currentvideoURL) {                                        currentVersion = jQuery.extend(true, {}, oldVersionList[i]);                                    }                                }                            }                            mediaController.versionList = versions;                            if (currentVersion != null) {                                var found = false;                                for (var i = 0; i < mediaController.versionList.length; i++) {                                    if (mediaController.versionList[i].url == currentVersion.url) {                                        found = true;                                        break;                                    }                                }                                if (!found)                                    mediaController.versionList.unshift(currentVersion);                            }                            mediaController.startVersionIndex = -1;                            $scope.safeApply();                            $("#searchviewVersions").listview('refresh');                            //$("#popupVideoSettings-popup").css("margin-left", "");                            $('#popupVideoSettings').popup("reposition", {positionTo: '#chooseversionbutton'});                            $("#popupVideoSettings-popup").css("margin-left", "1px");                        }                        $('#loadversionimg').css("opacity", "0");                    }                },//checkVersions, return true if accept new versions                function (versions) {                    for (var i in versions) {                        var newlist = true;                        for (var j in mediaController.versionList) {                            if (versions[i].url == mediaController.versionList[j].url) {                                newlist = false;                                break;                            }                        }                        if (newlist == true) {                            break;                        }                    }                    return newlist;                },                2000            )        }    }}mediaController.cacheSong = function (artist, title) {    var reload = function (artistString, titleString, duration) {        $.ajax({            timeout: 30000,            url: preferences.serverURL + "?reloadversions=" + artistString + "&title=" + titleString + "&duration=" + duration + "&auth=" + authController.ip_token,            complete: function (data) {            }        })    };    var getinfo = function (artistString, titleString) {        $.ajax({            url: "http://ws.audioscrobbler.com/2.0/?method=track.getInfo&api_key=019c7bcfc5d37775d1e7f651d4c08e6f&artist=" + artistString + "&track=" + titleString + "&format=json",            success: function (data) {                var duration = 200000;                if (data.track) {                    if (data.track.duration) {                        duration = data.track.duration;                    }                }                //  alert(artistString+" - "+titleString);                if (authController.ip_token != "auth" && authController.ip_token != "") {                    var loadError = false;                    reload(artistString, titleString, duration);                }            }        })    }    var artistString = encodeURIComponent(artist);    var titleString = encodeURIComponent(title);    getinfo(artistString, titleString);}mediaController.loadingPopupVisible = false;mediaController.loadingPopupVisibleTime = null;mediaController.loadingPopupVisibleDelay = 5000;mediaController.showLoadingPopup = function (streamID) {    return;//TODO Remove for Information    $("#popupLoadingSong .titleloading").text("Please wait...");    mediaController.loadingPopupVisible = true;    setTimeout(function () {        if (streamID == mediaController.playCounter && mediaController.loadingPopupVisible) {            // $("#popupLoadingSongClose").hide();            $("#popupLoadingSong").popup({ history: false });            $('#popupLoadingSong').popup('open', {transition: 'pop', history: false});            mediaController.loadingPopupVisibleTime = Date.now();        }    }, 3000);}mediaController.hideLoadingPopup = function () {    if (!mediaController.loadingPopupVisibleTime || Date.now() - mediaController.loadingPopupVisibleTime < mediaController.loadingPopupVisibleDelay) {        setTimeout(function () {            if (mediaController.loadingPopupVisibleTime && Date.now() - mediaController.loadingPopupVisibleTime >= mediaController.loadingPopupVisibleDelay) {                mediaController.loadingPopupVisible = false;                $('#popupLoadingSong').popup('close');            }        }, mediaController.loadingPopupVisibleDelay + 50 - (Date.now() - mediaController.loadingPopupVisibleTime));        // $("#popupLoadingSongClose").show();        $("#popupLoadingSong .titleloading").text("Playing now...");    }    else {        mediaController.loadingPopupVisible = false;        $('#popupLoadingSong').popup('close');    }}mediaController.playVersion = function (songversion, rating, resetVersion) {    console.log("#### mediaController.playVersion " + songversion + " " + rating + " " + resetVersion)    console.dir(songversion);    var loadError = false;    $('#loadversionimg').css("opacity", "1");    mediaController.playCounter++;    var streamID = mediaController.playCounter;    var videoURL = songversion.url    var play = function (streamID, videoURL) {        var song = playbackController.getPlayingSong();        if (videoURL != mediaController.currentvideoURL) {            if (videoController.isEmbedVideo(videoURL)) {                if (rating == 1) {                    mediaController.sendRating("-1");                }                mediaController.versionListSong = song;                mediaController.playStreamURLSeek(videoURL, videoURL, true, rating);                $('#loadversionimg').css("opacity", "0");                setTimeout(function () {                    videoController.showBuffering(false);                }, 500);            }            else {                //  console.dir(videoURL);                if (authController.ip_token != "auth" && authController.ip_token != "") {                    $.ajax({                        timeout: 60000,                        url: preferences.serverURL + "?playurl=" + encodeURIComponent(videoURL) + "&artist=" + encodeURIComponent(mediaController.getSongArtist(song)) + "&title=" + encodeURIComponent(song.name) + "&auth=" + authController.ip_token,                        success: function (data) {                            console.dir("PLAY VERSION!");                            console.dir(data);                            if (authController.ensureAuthenticated(data, function () {                                play(streamID, videoURL);                            })) {                                if (streamID == mediaController.playCounter) {                                    if (data.streamURL) {                                        var streamURL = data.streamURL;                                        if (data.videoURL) {                                            videoURL = data.videoURL;                                        }                                        videoURL = unescape(videoURL);                                        streamURL = unescape(streamURL);                                        if (streamURL) {                                            if (rating == 1) {                                                mediaController.sendRating("-1");                                            }                                            if (resetVersion == 1) {                                                mediaController.startVersionIndex = -1;                                            }                                            mediaController.seekTime = videoController.progressTime;                                            mediaController.seekTimeDuration = videoController.maxTime;                                            mediaController.versionListSong = song;                                            mediaController.playStreamURLSeek(streamURL, videoURL, true, rating);                                        } else                                            loadError = true;                                    } else                                        loadError = true;                                } else                                    loadError = true;                            }                        },                        error: function (xhr, ajaxOptions, thrownError) {                            console.dir("PLAY VERSION ERROR!");                            console.dir(xhr.responseText);                            console.dir(xhr.status);                            console.dir(thrownError);                            loadError = true;                        },                        complete: function () {                            //TODO                            $('#loadversionimg').css("opacity", "0");                            setTimeout(function () {                                videoController.showBuffering(false);                            }, 500);                            if (loadError)                                mediaController.playNextVersion();                        }                    })                }            }        }        else {            $('#loadversionimg').css("opacity", "0");            setTimeout(function () {                videoController.showBuffering(false);            }, 500);        }    }    play(streamID, videoURL);}mediaController.loadStreamURL = function (streamID, searchString, artistString, titleString, streamURL, duration, playedAutomatic, fromCache) {    mediaController.showLoadingPopup(streamID);    var loadError = false;    console.log("LOADSONG " + preferences.serverURL + "?play=" + encodeURIComponent(searchString) + "&force1=" + encodeURIComponent(artistString) + "&force2=" + encodeURIComponent(titleString) + "&duration=" + duration + "&fromCache=" + fromCache + "&auth=" + authController.ip_token)    $.ajax({        timeout: 60000,        url: preferences.serverURL + "?play=" + encodeURIComponent(searchString) + "&force1=" + encodeURIComponent(artistString) + "&force2=" + encodeURIComponent(titleString) + "&duration=" + duration + "&fromCache=" + fromCache + "&auth=" + authController.ip_token,        success: function (data) {            if (streamID == mediaController.playCounter) {                if (authController.ensureAuthenticated(data, function () {                    mediaController.loadStreamURL(streamID, searchString, artistString, titleString, streamURL, duration, playedAutomatic, fromCache);                })) {                    mediaController.playCounter++;                    var videoURL = "";                    if (data.videoURL) {                        videoURL = data.videoURL;                    }                    videoURL = unescape(videoURL);                    //console.dir("videoURL: "+videoURL)                    if (videoController.isEmbedVideo(videoURL)) {                        streamURL = videoURL;                    }                    else if (data.streamURL) {                        streamURL = data.streamURL;                        streamURL = unescape(streamURL);                    } else                        loadError = true;                    if (!loadError && streamURL)                        mediaController.playStreamURL(streamURL, videoURL, true, duration);                }            }            if (loadError) {                mediaController.hideLoadingPopup();            }        },        error: function (xhr, ajaxOptions, thrownError) {            console.dir(" mediaController.loadStreamURL error: " + xhr.responseText)            console.dir(ajaxOptions);            console.dir(thrownError);            loadError = true;            /* setTimeout(function () {             videoController.showBuffered(true);             videoController.showBuffering(false);             }, 500);*/            mediaController.hideLoadingPopup();        },        complete: function () {            //console.dir(" mediaController.loadStreamURL complete")            //log("COMPLETED")            //playbackController.isLoading = false;            //console.log("LOADED")            if (loadError) {                //  console.log("ERROR")                mediaController.onLoadingError(streamID, playedAutomatic);            }        }    })}mediaController.onLoadingError = function (streamID, playedAutomatic) {    if (streamID == mediaController.playCounter) {        if (playedAutomatic)            playbackController.playNextSong();        else {            setTimeout(function () {                videoController.showBuffering(false);            }, 500);            uiController.toast("Sorry, this song is not available at the moment.", 1500);            playbackController.resetPlayingSong();        }    }}mediaController.playStream = function (artist, title, playedAutomatic, fromCache) {    console.log("mediaController.playStream " + artist + " " + title)    if (fromCache == "1" || fromCache == 1) {        mediaController.retrySongCounter = 0;    }    videoController.setLoopButton(false);    mediaController.playCounter++;    var streamID = mediaController.playCounter;    var artistString = artist;    var titleString = title;    artistString = artistString.replace("?", "");    titleString = titleString.replace("?", "");    var url = (window.location != window.parent.location) ? document.referrer : document.location;    parent.postMessage('title:' + $scope.appTitle + ": " + artistString + " - " + titleString, url);    parent.postMessage("url:\?artist=" + encodeURIComponent(artistString) + "&title=" + encodeURIComponent(titleString), url);    var searchString = "";    if (artist != "")        searchString = artist + " - " + title;    else        searchString = title;    var streamURL = "";    var duration = 200000;    mediaController.loadStreamURL(streamID, searchString, artistString, titleString, streamURL, duration, playedAutomatic, fromCache);    return; //TODO move check for duration to Server    var play = function (streamID, searchString, artistString, titleString, streamURL, fromCache) {        $.ajax({            timeout: 3000,            url: "http://ws.audioscrobbler.com/2.0/?method=track.getInfo&api_key=019c7bcfc5d37775d1e7f651d4c08e6f&artist=" + encodeURIComponent(artistString) + "&track=" + encodeURIComponent(titleString) + "&format=json",            success: function (data) {                if (streamID == mediaController.playCounter) {                    if (data.track && data.track.duration)                        var duration = data.track.duration;                    else                        duration = 200000;                    console.log("mediaController.playStream Loading Video URL...")                    mediaController.loadStreamURL(streamID, searchString, artistString, titleString, streamURL, duration, playedAutomatic, fromCache);                }            },            error: function () {                var duration = 200000;                mediaController.loadStreamURL(streamID, searchString, artistString, titleString, streamURL, duration, playedAutomatic, fromCache);            }        })    }    play(streamID, searchString, artistString, titleString, streamURL, fromCache);}mediaController.playStreamURLSeek = function (streamURL, videoURL, differentVersions, rating) {    //console.dir("playStreamURLSeek!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");    console.log("#### mediaController.playStreamURLSeek " + streamURL + " " + videoURL + " " + differentVersions)    playbackController.playingOldSong = playbackController.playingSong;    playbackController.setNewTitle(playbackController.playingSong.name, mediaController.getSongCover(playbackController.playingSong), true);    mediaController.playSong(streamURL, videoURL);    if (rating == 1)        mediaController.sendRating("1");    if (differentVersions) {        videoController.disableVersionControl(false);    } else        videoController.disableVersionControl(true);}mediaController.songError = function () {    setTimeout(function () {        videoController.showBuffering(false);    }, 500);    uiController.toast("Sorry, this song is not available at the moment.", 1500);    playbackController.resetPlayingSong();}//Play Next Version of Song (after Error for example)mediaController.playNextVersion = function () {    console.log("#### mediaController.playNextVersion")    //console.dir("playNextVersion!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");    if (!videoController.versionsEnabled)        return;    var currentsong = playbackController.getPlayingSong();    if (currentsong.name != "") {        if (mediaController.versionListSong != currentsong) {            mediaController.getVersions(currentsong,true, function (versions) {                if (versions && versions.length > 0)                    mediaController.playVersion(versions[0], 1, 0);            })        }        else {            var nextIndex = -1;            for (var i = 0; i < mediaController.versionList.length; i++) {                if (mediaController.versionList[i].url == mediaController.currentvideoURL) {                    nextIndex = i;                    break;                }            }            nextIndex = nextIndex + 1;            if (nextIndex >= mediaController.versionList.length)                nextIndex = 0;            if (mediaController.startVersionIndex != nextIndex) {                if (mediaController.startVersionIndex == -1)                    mediaController.startVersionIndex = nextIndex;                mediaController.playVersion(mediaController.versionList[nextIndex], 1, 0)            }            else                mediaController.songError();        }    }};/* Play the Song from the URL and adjust the UI to playing State */mediaController.playStreamURL = function (streamURL, videoURL, differentVersions, duration) {    //console.dir("playStreamURL!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");    var listElement = playbackController.getListElementFromElement(playbackController.playingSong);    $(".songlist li.oldloadedsong").removeClass("oldloadedsong").not(listElement).removeClass("loadedsong playing pausing");    //    uiController.swipeTimer = Date.now(); //Avoid Clicks    //setTimeout(function () {    // var listElement = playbackController.getListElementFromElement(playbackController.playingSong);    if (listElement.length == 0 || (listElement.length > 0 && listElement.hasClass("loadedsong"))) {        uiController.dontRemark = true;        listElement.addClass("firstplay");        var cover = listElement.find("img.ui-li-icon");        var playing = listElement.find(".loadingSongImg");        cover.addClass("fadeout");        playing.addClass("fadeout");        uiController.swipeTimer = Date.now();//Avoid Clicks        setTimeout(function () {            var fadeIn = !listElement.hasClass("playing");            if (listElement.hasClass("stillloading")) {                $(".songlist li.pausing").removeClass("pausing");                $(".songlist li.playing").not(listElement).removeClass("playing");                listElement.addClass("playing");                listElement.removeClass("stillloading");            }            //Already Playing (Reloaded Songversion), so no fading in the Play Symbol, already there            if (!fadeIn) {                console.log("!!!!!!!!NOOOOOOFADDEEEEEINNNNNN");                listElement.find(".loadingSongImg").css("opacity", "")                listElement.find("img.ui-li-icon").css("opacity", "1")            } else {                listElement.find("img.ui-li-icon").css("opacity", "0.001")                listElement.find(".loadingSongImg").css("opacity", "0")            }            listElement.find(".loadingSongImg").removeClass("fadeout")            listElement.find("img.ui-li-icon").removeClass("fadeout");            setTimeout(function () {                if (fadeIn)                    listElement.find("img.ui-li-icon").addClass("fadeincomplete")                listElement.removeClass("firstplay");                setTimeout(function () {                    listElement.find(".loadingSongImg").css("opacity", "")                    listElement.find("img.ui-li-icon").css("opacity", "1")                    listElement.find("img.ui-li-icon").removeClass("fadeincomplete");                    uiController.dontRemark = false;                }, 1000)            }, 500)        }, 50);        //Restrict numbe of safed played Songs (for prev(next Song)        if (playbackController.playedSongs.length > 100)            playbackController.playedSongs.splice(playbackController.playedSongs.length - 100, 100)        playbackController.playingOldSong = playbackController.playingSong;        playbackController.setNewTitle(playbackController.playingSong.name, mediaController.getSongCover(playbackController.playingSong), true);        mediaController.playSong(streamURL, videoURL, duration);        if (differentVersions) {            videoController.disableVersionControl(false);        } else            videoController.disableVersionControl(true);    }    // }, 100)};//Toggle Song LyricsmediaController.toggleLyrics = function () {    var iframe = $('#lyricsiframe');    mediaController.showLyrics = !mediaController.showLyrics;    if (mediaController.showLyrics) {        if (playbackController.playingSong) {            var src = "http://lyrics.wikia.com/" + mediaController.getSongArtist(playbackController.playingSong) + ":" + playbackController.playingSong.name + "?useskin=wikiamobile";            if ($("#lyricsifrm").attr("src") != src)                $("#lyricsifrm").attr("src", src);            iframe.show();            setTimeout(function () {                iframe.css("left", "").css("opacity", "").css("pointer-events", "auto");            }, 0)        }    } else {        iframe.css("left", "-50px").css("opacity", "0").css("pointer-events", "none");        setTimeout(function () {            iframe.hide();        }, 1500)    }};/** * Get Cover for loaded Playlist * @returns {string} */mediaController.getSongCoverForLoadedPlaylist = function () {    if (playlistController.loadedPlaylists[0] && playbackController.playingSong) {        return mediaController.getSongCover(playbackController.playingSong);    } else        return "public/img/playlist.png";}/** * Get the Cover for Element * @returns {string} */mediaController.getImage = function (element, defaultImage) {    if (!defaultImage)        var url = "public/img/playlist.png";    else        url = defaultImage;    if (element.image) {        if (element.image[1])            url = element.image[1]['#text'];        else            url = element.image[0]['#text']    } else        url = "public/img/playlist.png";    if (!url || $.trim(url) == "")        url = "public/img/playlist.png";    return url;};/** * Get the Cover(s) for Playlist * @param index * @param playlist * @returns {string} */mediaController.getPlaylistCoverSong = function (index, maxIndex, playlist, playingSong) {    if (playlist.isPlaylist) {        if (playingSong && playbackController.playingSong)            return "background-image:url(" + mediaController.getSongCover(playbackController.playingSong, (index != 0)) + ")";        var actIndex = playlist.tracks.length - 1 - index;        if (playlist.tracks && playlist.tracks[actIndex]) {            if (playlist.tracks[actIndex].isGoogleDrive)                return "background-image:url(public/img/playlistgdrive.png)";            else                return "background-image:url(" + mediaController.getSongCover(playlist.tracks[actIndex], (index != 0)) + ")";        }        else            return "background-image:url(public/img/playlist.png);opacity:0.9;";    } else        return "display:none";};// Get Cover of SongmediaController.getSongCover = function (song, lowQuality) {    var url = "";    if (!song)        url = "public/img/playlist.png";    else if (song.isPlaylist) {        url = "public/img/empty.png";    } else {        if (song.image) {            if (song.image[1] && !lowQuality)                url = song.image[1]['#text'];            else                url = song.image[0]['#text']        } else            url = "public/img/playlist.png";    }    if (!url || $.trim(url) == "")        url = "public/img/playlist.png";    return url;};//Get Display name of SongmediaController.getSongDisplayName = function (song) {    if (!song)        return mediaController.unknownData;    var artist = mediaController.getSongArtist(song);    if (artist == "") {        if (song.name)            return song.name;        else            return mediaController.unknownData;    } else {        if (song.name)            return artist + " - " + song.name;        else            return artist + " - " + mediaController.unknownData;    }};/** * Returns Title for Element, used in List to identify elements * @param element * @returns {string} */mediaController.getElementTitle = function (element) {    if (!element)        return "";    var name = element.name;    if (element.artist && element.artist.name)        var artist = element.artist.name;    else        artist = mediaController.unknownData;    if (element.isPlaylist)        return "Playlist: " + name + " - " + artist;    else        return "Song: " + name + " - " + artist;};//Get Name of Song ArtistmediaController.getSongArtist = function (song) {    if (!song)        return mediaController.unknownData;    var artist = mediaController.unknownData;    if (song.artist) {        if (song.artist.name)            artist = song.artist.name;        else            artist = song.artist;    }    return artist;};