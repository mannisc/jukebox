/** * index.js * * * @author * @date 15.04.15 - 19:27 * @copyright */var chartController;ChartController = function () {    this.chartTrends = null;    this.chartTrendsArray = null;    var that = this;    /**     * Init the Chartcontroller     */    this.init = function () {        //Wait for images to load        setTimeout(function () {            $.ajax({url: "data/charttrends.txt", success: function (chartTrendsJSON) {                that.chartTrends = JSON.parse(chartTrendsJSON);                that.chartTrendsArray = [];                for (var p in that.chartTrends) {                    if (that.chartTrends.hasOwnProperty(p)) {                        that.chartTrendsArray[that.chartTrends[p].index - 1] = that.chartTrends[p];                    }                }                var popularSongList = $("#popularSongList")                $("#loadingPopularSongs").hide();                $("#updatePopularSongs, #popularSongListContainer").show();                if (false)                    for (var i = 0; i < that.chartTrendsArray.length; i++) {                        var song = that.chartTrendsArray[i];                        console.log(song);                        var editSongElement = $('' +                            '<a  class="list-group-item" >' +                            //'<i class="fa fa-fw fa-music"></i><br>' +                            '<span class="badge">' + song.index + '</span>' +                            '<span class="badge ">' + that.song.getTrendString(song) + '</span></span>' +                            '<h4 class="list-group-item-heading">' +                            '<div class="contenteditableInline popularSongName" contenteditable="true">' + song.name + '</div>' +                            '</h4>' +                            '<p class="list-group-item-text">' +                            '<div  class="contenteditableInline popularSongArtist" contenteditable="true">' + song.artist + '</div>' +                            '</p>' +                            '<span class="pull-right">' +                            // '<button class="btn btn-xs btn-info">CCS</button>' +                            '<button class="hideSongButton btn btn-xs btn-' + that.song.getIsHiddenButtonType(song) + '">' + that.song.getIsHiddenString(song) + '</button>' +                            '</span>' +                            '<div style="clear: both;"></div>' +                            '</a>');                        popularSongList.append(editSongElement);                        var onClick = function (editSongElement, song) {                            //Edit Song Name                            editSongElement.find(".popularSongName")[0].addEventListener("input", function () {                                var songKey = song.origArtist + "-" + song.origName + "-" + song.duration;                                that.chartTrends[songKey].name = $(this).text();                                that.chartTrendsArray[that.chartTrends[songKey].index - 1] = that.chartTrends[songKey];                            }, false);                            //Edit Song Artist                            editSongElement.find(".popularSongArtist")[0].addEventListener("input", function () {                                var songKey = song.origArtist + "-" + song.origName + "-" + song.duration;                                that.chartTrends[songKey].artist = $(this).text();                                that.chartTrendsArray[that.chartTrends[songKey].index - 1] = that.chartTrends[songKey];                            }, false);                            //Hide Song                            editSongElement.find(".hideSongButton").click(function () {                                var songKey = song.origArtist + "-" + song.origName + "-" + song.duration;                                if (that.chartTrends[songKey].hidden == undefined)                                    that.chartTrends[songKey].hidden = true;                                else                                    that.chartTrends[songKey].hidden = !that.chartTrends[songKey].hidden;                                that.chartTrendsArray[that.chartTrends[songKey].index - 1] = that.chartTrends[songKey];                            });                        }                        onClick(editSongElement, song);                    }                console.dir(chartsAppController.chartController);                chartsAppController.safeApply();            }});        }, 100);        $("#updatePopularSongs").click(function () {            that.updatePopularSong()        });    };    this.updatePopularSong = function () {        $.ajax({            url: "http://h2406563.stratoserver.net:3005/admin/",            method: "POST",            data: {                chartTrendsJSON: JSON.stringify(that.chartTrends)            },            success: function (data) {                alert(data)            },            error: function () {                $('#info').html('<p>An error has occurred</p>');            }        })    }    this.song = {        getTrendString: function (song) {            if (song.trend == 3)                return "New";            else if (song.trend == 0)                return "Winner";            else if (song.trend == 2)                return "Loser";            else                return "Same";        },        getIsHiddenString: function (song) {            if (song.hidden == true)                return "Show";            else                return "Hide";        },        getIsHiddenButtonType: function (song) {            if (song.hidden == true)                return "btn-danger";            else                return "btn-warning";        },        toggleSongVisibility:function(song){            console.log("!!!!")            console.log(song)            var songKey = song.origArtist + "-" + song.origName + "-" + song.duration;            if (that.chartTrends[songKey].hidden == undefined)                that.chartTrends[songKey].hidden = true;            else                that.chartTrends[songKey].hidden = !that.chartTrends[songKey].hidden;            that.chartTrendsArray[that.chartTrends[songKey].index - 1] = that.chartTrends[songKey];        }    }};//Angularvar chartsAppController;angular.module('chartsApp', [])    .controller('chartsAppController',function ($scope) {        chartController = new ChartController();        $(document).ready(function () {            chartController.init();        });        chartsAppController = this;        chartsAppController.chartController = chartController;        console.log("!!!!")        chartsAppController.safeApply = function () {            console.log($scope.$apply)            if (!$scope.$root.$$phase) {                $scope.$apply();            }        };        chartsAppController.todos = [            {text: 'learn angular', done: true},            {text: 'build an angular app', done: false}        ];        chartsAppController.addTodo = function () {            chartsAppController.todos.push({text: chartsAppController.todoText, done: false});            chartsAppController.todoText = '';        };        chartsAppController.remaining = function () {            var count = 0;            angular.forEach(chartsAppController.todos, function (todo) {                count += todo.done ? 0 : 1;            });            return count;        };        chartsAppController.archive = function () {            var oldTodos = chartsAppController.todos;            chartsAppController.todos = [];            angular.forEach(oldTodos, function (todo) {                if (!todo.done) chartsAppController.todos.push(todo);            });        };    }).directive("contenteditable", function () {        return {            restrict: "A",            require: "ngModel",            link: function (scope, element, attrs, ngModel) {                function read() {                    ngModel.$setViewValue(element.html());                }                ngModel.$render = function () {                    element.html(ngModel.$viewValue || "");                };                element.bind("blur keyup change", function () {                    scope.$apply(read);                });            }        }    });